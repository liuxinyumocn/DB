package cn.domoe.OPTICS;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class OPTICS {

	private Queue<double[]> result = new LinkedList<>();
	private Queue<double[]> order = new LinkedList<>();
	
	private double[][] data = null;
	
	private double s = 3;
	private int MinPts = 3;
	
	public OPTICS(double[][] data){
		this.data = data;

		this.print(data,0,2);
		
		for(int i = 0;i<data.length;i++) {
			//判断是否在结果队列中
			double[][] result = queueToArrayUnclear(this.result);
			boolean c = false;
			for(int j = 0;j<result.length;j++) {
				if(result[j][0] == data[i][0] && result[j][1] == data[i][1])
				{
					c = true;
					break;
				}
			}
			if(c) {
				continue;	
			}
			
			if(this.isCore(data[i], s, MinPts)) {
				this.pushResult(data[i]);
				//寻找基于该点的所有密度直达点集合
				List<double[]> list = this.getPoint(data[i], s);
				//将所有点放入Order队列中
				this.pushOrder(list);
				this.shiftOrder();
			}else {
			}
		}
		
		//打印Result
		double[][] result = queueToArray(this.result);
//		for(int i =0;i<result.length;i++) {
//			System.out.println(result[i][0] + " , " + result[i][1] + " || "+result[i][2] + " | "+result[i][3]);
//		}
		this.print(result,0,3);
	}
	
	private void print(double[][] list,int s ,int e) { //--------------------
		System.out.println("-------------------");
		for(int i = s;i<e;i++) {
			System.out.println("第"+i+"列：");
			for(int j=0;j<list.length;j++) {
				System.out.println(list[j][i]);
			}
		}
		
	}
	
	//将队列打印成数组，且不影响队列
	private double[][] queueToArrayUnclear(Queue<double[]> queue){
		double[][] list = new double[queue.size()][];
		int index = 0;
		while(true) {
			double[] i = queue.poll();
			if(i != null) {
				list[index++] = i;
			}else {
				break;
			}
		}
		for(int i = 0;i<list.length;i++) {
			queue.add(list[i]);
		}
		return list;
	}
	
	//将队列打印成数组，原队列不可用
	private double[][] queueToArray(Queue<double[]> queue) {
		double[][] list = new double[queue.size()][];
		int index = 0;
		while(true) {
			double[] i = queue.poll();
			if(i != null) {
				list[index++] = i;
			}else {
				break;
			}
		}
		return list;
	}
	
	//从序列集合中取出新的点
	private void shiftOrder() {
		double[] p = order.poll();
		if(p == null) {
			return;
		}

		if(this.isCore(p, s, MinPts)) {
			pushResult(p);
			List<double[]> list = getPoint(p,s);
			pushOrder(list);
		}else {
		}
		shiftOrder();
	}
	
	private boolean isCore(double[] p,double s,int MinPts){
		int num = 0;
		double[] diss = new double[MinPts];
		for(int i =0;i<diss.length;i++) {
			diss[i] = 9999;
		}
		for(int i =0;i< this.data.length;i++){
			double dis = this.dis(p, this.data[i]);
			if(dis <= s){
				num++;
				//将dis存入diss diss只保留最小的前MinPts个
				int index = 0;
				for(int j = 0;j<diss.length;j++) {
					if(diss[j] > diss[index]) {
						index = j;
					}
				}
				if(diss[index] > dis) {
					diss[index] = dis;
				}
			}
		}

		if(num >= MinPts){ //是核心
			//diss中最大值
			double max = 0;
			for(int i = 0;i<diss.length;i++) {
				if(max < diss[i])
					max = diss[i];
			}
			p[3] = max;
			return true;
		}
		return false;
	}
	
	private double dis(double[] a ,double[] b){
		double a2 = a[0]-b[0];
		double b2 = a[1]-b[1];
		return Math.sqrt(a2*a2 + b2*b2);
	}
	
	private List<double[]> getPoint(double[] p,double s){
		List<double[]> list = new ArrayList<>();
		double[][] result = this.queueToArrayUnclear(this.result);
		for(int i = 0;i<this.data.length;i++){
			double[] q = this.data[i];
			//不能是结果点
			boolean c = false;
			for(int j = 0;j<result.length;j++) {
				if(result[j] == q) {
					c = true;
					break;
				}
			}
			if(c)
				continue;
			double dis = this.dis(q, p);
			if(dis <= s && q != p){
				boolean update = false;
				if(q[2] > dis) {
					update = true;
					q[2] = dis;
				}
				if(update)
				if(q[2] < p[3])
					q[2] = p[3];
				list.add(q);
			}
		}
		return list;
	}
	
	//放入Order中并重新排序 放入的点不能已经存在于Result中 也不能已经存在于Order中
	private void pushOrder(List<double[]> list){

		double[][] order = this.queueToArrayUnclear(this.order);
		double[][] result = this.queueToArrayUnclear(this.result);
		
		for(int i = 0;i<list.size();i++){
			boolean c = false;
			double[] item = list.get(i);
			for(int j =0;j<result.length;j++) {
				if(result[j] == item) {
					c = true;
					break;
				}
			}
			if(c)
				continue;
			for(int j =0;j<order.length;j++){
				if(order[j] == item){
					c = true;
					if(order[j][2] > item[2])
						order[j][2] = item[2];
					break;
				}
			}
			if(!c) 
				this.order.add(item);			
		}
		//重新排序
		order =  this.queueToArray(this.order);
		for(int i = 0;i<order.length;i++) {
			for(int j = i+1;j<order.length;j++) {
				if(order[i][2] > order[j][2]) {
					double[] a = order[i];
					order[i] = order[j];
					order[j] = a;
				}		
			}
		}
		//放回queue
		for(int i = 0;i<order.length;i++) {
			this.order.add(order[i]);
		}
	}
	
	//去重复加入Result
	private void pushResult(double[] p) {
		double[][] data = this.queueToArrayUnclear(this.result);
		for(int i =0;i<data.length;i++) {
			if(data[i] == p) {
				return;
			}
		}
		this.result.add(p);
	}
	
	public static void main(String[] args) {
//		double[][] data = new double[50][];
//		for(int i = 0;i<data.length;i++){
//			int a = (int)(Math.random() * 20);
//			int b = (int)(Math.random() * 20);
//			data[i] = new double[]{a,b,9999,9999};
//		}
//		
		double[][] data2 = new double[][] {
			{21,21,9999,9999},{22,22,9999,9999},{22,23,9999,9999},{22,24,9999,9999},{22,25,9999,9999},{22,26,9999,9999},{21,26,9999,9999},{21,27,9999,9999},{20,27,9999,9999},{20,26,9999,9999},{20,25,9999,9999},{20,24,9999,9999},{20,23,9999,9999},{20,22,9999,9999},{21,22,9999,9999},{22,21,9999,9999},{23,21,9999,9999},{24,21,9999,9999},{25,21,9999,9999},{25,22,9999,9999},{25,23,9999,9999},{24,23,9999,9999},{23,23,9999,9999},{21,24,9999,9999},{19,24,9999,9999},{17,21,9999,9999},{16,21,9999,9999},{15,21,9999,9999},{15,22,9999,9999},{14,22,9999,9999},{17,28,9999,9999},{17,29,9999,9999},{20,29,9999,9999},{21,29,9999,9999},{25,27,9999,9999},{27,20,9999,9999},{27,19,9999,9999},{26,19,9999,9999},{25,18,9999,9999},{24,17,9999,9999},{23,17,9999,9999},{18,17,9999,9999},{35,48,9999,9999},{27,44,9999,9999},{26,44,9999,9999},{26,45,9999,9999},{28,52,9999,9999},{35,50,9999,9999},{34,49,9999,9999},{34,50,9999,9999},{33,49,9999,9999},{32,49,9999,9999},{30,48,9999,9999},{31,48,9999,9999},{24,45,9999,9999},{24,46,9999,9999},{24,47,9999,9999},{25,48,9999,9999},{26,48,9999,9999},{27,50,9999,9999},{34,45,9999,9999},{29,46,9999,9999},{29,49,9999,9999},{31,51,9999,9999},{31,52,9999,9999},{31,53,9999,9999},{32,48,9999,9999},{32,47,9999,9999},{32,44,9999,9999},{31,44,9999,9999},{31,45,9999,9999},{30,46,9999,9999},{30,47,9999,9999},{29,45,9999,9999},{28,45,9999,9999},{28,46,9999,9999},{27,47,9999,9999},{27,48,9999,9999},{26,49,9999,9999},{27,49,9999,9999},{28,50,9999,9999},{28,51,9999,9999},{27,52,9999,9999},{26,52,9999,9999},{24,52,9999,9999},{25,52,9999,9999},{23,52,9999,9999},{21,53,9999,9999},{22,53,9999,9999},{23,53,9999,9999},{24,53,9999,9999},{25,53,9999,9999},{29,51,9999,9999},{29,50,9999,9999},{25,47,9999,9999},{25,49,9999,9999},{25,50,9999,9999},{24,50,9999,9999},{23,50,9999,9999},{22,49,9999,9999},{22,50,9999,9999},{21,49,9999,9999},{21,50,9999,9999},{22,51,9999,9999},{23,51,9999,9999},{24,51,9999,9999},{32,55,9999,9999},{36,36,9999,9999},{36,35,9999,9999},{37,35,9999,9999},{37,34,9999,9999},{40,29,9999,9999},{40,28,9999,9999},{39,24,9999,9999},{33,23,9999,9999},{15,38,9999,9999},{11,46,9999,9999},{11,47,9999,9999},{15,49,9999,9999},{16,42,9999,9999},{14,43,9999,9999},{3,66,9999,9999},{2,66,9999,9999},{2,65,9999,9999},{2,64,9999,9999},{2,63,9999,9999},{1,63,9999,9999},{1,62,9999,9999},{1,64,9999,9999},{1,65,9999,9999},{1,66,9999,9999},{1,67,9999,9999},{1,68,9999,9999},{1,69,9999,9999},{2,69,9999,9999},{3,69,9999,9999},{4,70,9999,9999},{5,70,9999,9999},{6,70,9999,9999},{5,63,9999,9999},{5,64,9999,9999},{5,65,9999,9999},{5,66,9999,9999},{5,67,9999,9999},{5,68,9999,9999},{5,69,9999,9999},{4,71,9999,9999},{4,69,9999,9999},{4,68,9999,9999},{4,67,9999,9999},{6,66,9999,9999},{7,66,9999,9999},{8,65,9999,9999},{9,65,9999,9999},{9,64,9999,9999},{10,64,9999,9999},{5,62,9999,9999},{4,62,9999,9999},{3,63,9999,9999},{0,64,9999,9999},{-2,64,9999,9999},{-1,64,9999,9999},{-3,64,9999,9999},{-4,64,9999,9999},{2,61,9999,9999},{3,62,9999,9999},{4,63,9999,9999},{6,65,9999,9999},{8,67,9999,9999},{8,68,9999,9999},{9,69,9999,9999},{6,69,9999,9999},{6,71,9999,9999},{6,72,9999,9999},{5,72,9999,9999},{5,73,9999,9999},{0,33,9999,9999},{-1,33,9999,9999},{-1,34,9999,9999},{-2,34,9999,9999},{-1,31,9999,9999},{0,31,9999,9999},{1,32,9999,9999},{1,33,9999,9999},{1,34,9999,9999},{0,34,9999,9999},{0,35,9999,9999},{0,36,9999,9999},{-1,36,9999,9999},{-1,37,9999,9999},{-2,37,9999,9999},{-3,37,9999,9999},{-3,36,9999,9999},{-3,35,9999,9999},{-3,34,9999,9999},{-2,33,9999,9999},{-2,32,9999,9999},{-1,32,9999,9999},{1,30,9999,9999},{2,30,9999,9999},{3,30,9999,9999},{3,31,9999,9999},{3,32,9999,9999},{2,32,9999,9999},{0,32,9999,9999},{-2,29,9999,9999},{-2,30,9999,9999},{-2,31,9999,9999},{-1,35,9999,9999},{1,50,9999,9999},{0,50,9999,9999},{0,51,9999,9999},{-1,51,9999,9999},{-2,50,9999,9999},{-2,49,9999,9999},{-2,48,9999,9999},{-2,47,9999,9999},{-2,45,9999,9999},{27,64,9999,9999},{23,71,9999,9999},{10,57,9999,9999},{28,37,9999,9999},{2,23,9999,9999},{-2,66,9999,9999},{0,28,9999,9999},{-1,28,9999,9999},{-2,28,9999,9999},{-4,29,9999,9999},{-5,32,9999,9999},{-4,33,9999,9999},{-4,31,9999,9999},{-4,32,9999,9999},{-3,33,9999,9999},{26,18,9999,9999},{24,18,9999,9999},{24,19,9999,9999},{23,19,9999,9999},{22,20,9999,9999},{21,20,9999,9999},{20,20,9999,9999},{19,20,9999,9999},{19,21,9999,9999},{19,23,9999,9999},{15,24,9999,9999},{18,24,9999,9999},{18,22,9999,9999},{18,25,9999,9999}
			//{19,15,9999,9999},{20,15,9999,9999},{21,15,9999,9999},{19,16,9999,9999},{19,17,9999,9999},{19,18,9999,9999},{19,19,9999,9999},{19,20,9999,9999},{20,19,9999,9999},{20,18,9999,9999},{21,18,9999,9999},{22,18,9999,9999},{23,17,9999,9999},{24,17,9999,9999},{25,17,9999,9999},{25,18,9999,9999},{25,19,9999,9999},{25,20,9999,9999},{24,20,9999,9999},{23,20,9999,9999},{22,20,9999,9999},{22,19,9999,9999},{22,17,9999,9999},{21,17,9999,9999},{20,17,9999,9999},{19,21,9999,9999},{19,22,9999,9999},{19,23,9999,9999},{20,23,9999,9999},{21,23,9999,9999},{21,22,9999,9999},{22,22,9999,9999},{22,21,9999,9999},{21,19,9999,9999},{20,20,9999,9999},{20,21,9999,9999},{20,22,9999,9999},{21,21,9999,9999},{21,20,9999,9999},{18,19,9999,9999},{17,19,9999,9999},{17,20,9999,9999},{17,21,9999,9999},{17,22,9999,9999},{18,22,9999,9999},{18,23,9999,9999},{17,18,9999,9999},{17,17,9999,9999},{16,17,9999,9999},{15,17,9999,9999},{18,17,9999,9999},{18,16,9999,9999},{17,13,9999,9999}
		};
		new OPTICS(data2);
	}

}
